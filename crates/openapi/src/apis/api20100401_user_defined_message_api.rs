/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`create_user_defined_message`]
#[derive(Clone, Debug)]
pub struct CreateUserDefinedMessageParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created User Defined Message.
    pub account_sid: String,
    /// The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message is associated with.
    pub call_sid: String,
    /// The User Defined Message in the form of URL-encoded JSON string.
    pub content: String,
    /// A unique string value to identify API call. This should be a unique string value per API call and can be a randomly generated.
    pub idempotency_key: Option<String>
}


/// struct for typed errors of method [`create_user_defined_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateUserDefinedMessageError {
    UnknownValue(serde_json::Value),
}


/// Create a new User Defined Message for the given Call SID.
pub async fn create_user_defined_message(configuration: &configuration::Configuration, params: CreateUserDefinedMessageParams) -> Result<crate::models::ApiPeriodV2010PeriodAccountPeriodCallPeriodUserDefinedMessage, Error<CreateUserDefinedMessageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let account_sid = params.account_sid;
    let call_sid = params.call_sid;
    let content = params.content;
    let idempotency_key = params.idempotency_key;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/UserDefinedMessages.json", local_var_configuration.base_path, AccountSid=crate::apis::urlencode(account_sid), CallSid=crate::apis::urlencode(call_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("Content", content.to_string());
    if let Some(local_var_param_value) = idempotency_key {
        local_var_form_params.insert("IdempotencyKey", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateUserDefinedMessageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

