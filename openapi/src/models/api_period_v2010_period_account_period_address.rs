/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiPeriodV2010PeriodAccountPeriodAddress {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource.
    #[serde(rename = "account_sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<Option<String>>,
    /// The city in which the address is located.
    #[serde(rename = "city", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub city: Option<Option<String>>,
    /// The name associated with the address.This property has a maximum length of 16 4-byte characters, or 21 3-byte characters.
    #[serde(rename = "customer_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub customer_name: Option<Option<String>>,
    /// The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
    #[serde(rename = "date_created", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<Option<String>>,
    /// The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
    #[serde(rename = "date_updated", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<Option<String>>,
    /// The string that you assigned to describe the resource.
    #[serde(rename = "friendly_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<Option<String>>,
    /// The ISO country code of the address.
    #[serde(rename = "iso_country", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub iso_country: Option<Option<String>>,
    /// The postal code of the address.
    #[serde(rename = "postal_code", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub postal_code: Option<Option<String>>,
    /// The state or region of the address.
    #[serde(rename = "region", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub region: Option<Option<String>>,
    /// The unique string that that we created to identify the Address resource.
    #[serde(rename = "sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sid: Option<Option<String>>,
    /// The number and street address of the address.
    #[serde(rename = "street", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub street: Option<Option<String>>,
    /// The URI of the resource, relative to `https://api.twilio.com`.
    #[serde(rename = "uri", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub uri: Option<Option<String>>,
    /// Whether emergency calling has been enabled on this number.
    #[serde(rename = "emergency_enabled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub emergency_enabled: Option<Option<bool>>,
    /// Whether the address has been validated to comply with local regulation. In countries that require valid addresses, an invalid address will not be accepted. `true` indicates the Address has been validated. `false` indicate the country doesn't require validation or the Address is not valid.
    #[serde(rename = "validated", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub validated: Option<Option<bool>>,
    /// Whether the address has been verified to comply with regulation. In countries that require valid addresses, an invalid address will not be accepted. `true` indicates the Address has been verified. `false` indicate the country doesn't require verified or the Address is not valid.
    #[serde(rename = "verified", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub verified: Option<Option<bool>>,
    /// The additional number and street address of the address.
    #[serde(rename = "street_secondary", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub street_secondary: Option<Option<String>>,
}

impl ApiPeriodV2010PeriodAccountPeriodAddress {
    pub fn new() -> ApiPeriodV2010PeriodAccountPeriodAddress {
        ApiPeriodV2010PeriodAccountPeriodAddress {
            account_sid: None,
            city: None,
            customer_name: None,
            date_created: None,
            date_updated: None,
            friendly_name: None,
            iso_country: None,
            postal_code: None,
            region: None,
            sid: None,
            street: None,
            uri: None,
            emergency_enabled: None,
            validated: None,
            verified: None,
            street_secondary: None,
        }
    }
}


